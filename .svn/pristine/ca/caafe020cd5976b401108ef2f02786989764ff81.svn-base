#include "accelerometer.h"
#include "DMA.h"
#include "i2c_init.h"
#include "leds.h"
#include <gpio.h>
#include <stdint.h>
#include <stm32.h>

#define CTRL_REG1 0x20
#define CTRL_REG3 0x22

#define OUT_X 0x29
#define OUT_Y 0x2B
#define OUT_Z 0x2D

#define SCL_GPIO GPIOB
#define SCL_LINE 8
#define SDA_GPIO GPIOB
#define SDA_LINE 9

#define INT1 PA1
#define INT2 PA8

#define PCLK1_MHZ 16

#define X_LED RED
#define Y_LED GREEN
#define Z_LED BLUE

#define LIS35DE_ADDR 0x1C
#define CTRL_REG1_INIT_VALUE (1 << 6) | (1 << 2) | (1 << 1) | (1 << 0)

static void interception_wrapper(void (*fn)()) {
    Green2LEDoff();
    fn();
    Green2LEDon();
}

static void init_leds() {
    leds_setup();
    Green2LEDon();
}

static void configure_gpio() {
    GPIOafConfigure(SCL_GPIO, SCL_LINE, GPIO_OType_OD, GPIO_Low_Speed, GPIO_PuPd_NOPULL,
                    GPIO_AF_I2C1);
    GPIOafConfigure(SDA_GPIO, SDA_LINE, GPIO_OType_OD, GPIO_Low_Speed, GPIO_PuPd_NOPULL,
                    GPIO_AF_I2C1);
}

void _write(int8_t reg, int8_t value) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->DR = reg;
    while (!(I2C1->SR1 & I2C_SR1_TXE)) {
    }
    I2C1->DR = value;
    while (!(I2C1->SR1 & I2C_SR1_BTF)) {
    }
    I2C1->CR1 |= I2C_CR1_STOP;
}

int8_t _read(int8_t reg) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->DR = reg;
    while (!(I2C1->SR1 & I2C_SR1_BTF)) {
    }

    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1 | 1;

    I2C1->CR1 &= ~I2C_CR1_ACK;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->CR1 |= I2C_CR1_STOP;

    while (!(I2C1->SR1 & I2C_SR1_RXNE)) {
    }
    return I2C1->DR;
}

void write_buf() {
    while (!(USART2->SR & USART_SR_TXE)) {
    }
    USART_write_from_buffer();
}

static char *_float_to_char(float x, char *p) {
    char *s = p + 10;  // go to end of buffer
    uint16_t decimals; // variable to store the decimals
    int units;         // variable to store the units (part to left of decimal place)
    if (x < 0) {       // take care of negative numbers
        decimals = (int)(x * -100) % 100; // make 1000 for 3 decimals etc.
        units = (int)(-1 * x);
    } else { // positive numbers
        decimals = (int)(x * 100) % 100;
        units = (int)x;
    }

    *--s = (decimals % 10) + '0';
    decimals /= 10; // repeat for as many decimal places as you need
    *--s = (decimals % 10) + '0';
    *--s = '.';

    while (units > 0) {
        *--s = (units % 10) + '0';
        units /= 10;
    }
    if (x < 0)
        *--s = '-'; // unary minus sign for negative numbers
    return s;
}

static float abs(float f) {
    if (f < 0) {
        return -f;
    }
    return f;
}

static void write_new_values(int x, int y, int z) {
    char buff[10] = "";
    USART_add_string_to_out_buffer(_float_to_char(x, buff));
    USART_add_char_to_out_buffer(' ');
    USART_add_string_to_out_buffer(_float_to_char(y, buff));
    USART_add_char_to_out_buffer(' ');
    USART_add_string_to_out_buffer(_float_to_char(z, buff));
    USART_add_string_to_out_buffer("\r\n");

    for (int i = -0; i < 34; i++) {
        write_buf();
    }
}

static float normalize(float f) {
    return 1 - abs(f / 128);
}

static void handle_new_values(int x, int y, int z) {
    float new_x = normalize(x);
    float new_y = normalize(y);
    float new_z = normalize(z);

    //    write_new_values(new_x, new_y, new_z);
    leds_change_intensity(new_x, new_y, new_z);
}

static void turn_off_leds() {
    leds_change_intensity(1, 1, 1);
    Green2LEDoff();
}

static void init_accelerometer() {
    _write(CTRL_REG1, 0);


    _write(CTRL_REG1, CTRL_REG1_INIT_VALUE);

    while (1) {
        int x = _read(OUT_X);
        int y = _read(OUT_Y);
        int z = _read(OUT_Z);

        handle_new_values(x, y, z);
    }
}

void accelerometer_setup() {
    init_leds();

    i2c_init(PCLK1_MHZ * 1e6);
    configure_gpio();

    USART_setup(BAUDRATE);
    USART_enable();
    init_accelerometer();
}
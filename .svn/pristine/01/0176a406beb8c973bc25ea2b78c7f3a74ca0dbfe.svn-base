#include "accelerometer.h"
#include "DMA.h"
#include "leds.h"
#include <gpio.h>
#include <stdint.h>
#include <stm32.h>

#define CTRL_REG1 0x20
#define CTRL_REG3 0x22

#define OUT_X 0x29
#define OUT_Y 0x2B
#define OUT_Z 0x2D

#define SCL_GPIO GPIOB
#define SCL_LINE 8
#define SDA_GPIO GPIOB
#define SDA_LINE 9

#define INT1 PA1
#define INT2 PA8

#define I2C_SPEED_HZ 100000
#define PCLK1_MHZ 16

#define X_LED RED
#define Y_LED GREEN
#define Z_LED BLUE

#define LIS35DE_ADDR 0x1C
#define CTRL_REG1_INIT_VALUE (1 << 6) | (1 << 2) | (1 << 1) | (1 << 0)

typedef struct {
    float x;
    float y;
    float z;
} levels_t;

static void change_color(const levels_t levels) {
    leds_change_intensity(X_LED, levels.x);
    leds_change_intensity(Y_LED, levels.y);
    leds_change_intensity(Z_LED, levels.z);
}

static void interception_wrapper(void (*fn)()) {
    leds_turn_off_led(GREEN2);
    fn();
    leds_turn_on_led(GREEN2);
}

static void i2c_setup() {
    //    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
    __NOP();

    I2C1->CR1 = 0;
    I2C1->CCR = (PCLK1_MHZ * 1000000) / (I2C_SPEED_HZ << 1);
    I2C1->CR2 = PCLK1_MHZ;
    I2C1->TRISE = PCLK1_MHZ + 1;
    I2C1->CR1 |= I2C_CR1_PE;
}

static void init_leds() {
    leds_setup();
    leds_turn_on_led(GREEN2);
}

static void configure_gpio() {
    GPIOafConfigure(SCL_GPIO, SCL_LINE, GPIO_OType_OD, GPIO_Low_Speed, GPIO_PuPd_NOPULL,
                    GPIO_AF_I2C1);
    GPIOafConfigure(SDA_GPIO, SDA_LINE, GPIO_OType_OD, GPIO_Low_Speed, GPIO_PuPd_NOPULL,
                    GPIO_AF_I2C1);
}

void _write(int8_t reg, int8_t value) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->DR = reg;
    while (!(I2C1->SR1 & I2C_SR1_TXE)) {
    }
    I2C1->DR = value;
    while (!(I2C1->SR1 & I2C_SR1_BTF)) {
    }
    I2C1->CR1 |= I2C_CR1_STOP;
}

int8_t _read(int8_t reg) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->DR = reg;
    while (!(I2C1->SR1 & I2C_SR1_BTF)) {
    }

    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB)) {
    }
    I2C1->DR = LIS35DE_ADDR << 1 | 1;

    I2C1->CR1 &= ~I2C_CR1_ACK;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
    }
    I2C1->SR2;

    I2C1->CR1 |= I2C_CR1_STOP;

    while (!(I2C1->SR1 & I2C_SR1_RXNE)) {
    }
    return I2C1->DR;
}

void write_buf() {
    while (!(USART2->SR & USART_SR_TXE)) {
    }
    USART_write_from_buffer();
}

void handle_new_values(int x, int y, int z) {
    USART_add_char_to_out_buffer(x - 128);
    USART_add_char_to_out_buffer(y - 128);
    USART_add_char_to_out_buffer(z - 128);
    USART_add_string_to_out_buffer("\n\r");

    write_buf();
    write_buf();
    write_buf();
    write_buf();
    write_buf();

    leds_change_intensity(X_LED, (float)x / 256);

    leds_change_intensity(Y_LED, (float)y / 256);
    leds_change_intensity(Z_LED, (float)z / 256);
}

static void turn_off_leds() {
    leds_change_intensity(X_LED, 0);
    leds_change_intensity(Y_LED, 0);
    leds_change_intensity(Z_LED, 0);
    leds_turn_off_led(GREEN2);
}

static void init_accelerometer() {
    // tutaj można zgasić ledy
    //    turn_off_leds();
    _write(CTRL_REG1, 0);

    // po tej instrukcji już nie można gasić/sterować ledami, ani po dowolnym innym _write, _read
    //    turn_off_leds();
    _write(CTRL_REG1, CTRL_REG1_INIT_VALUE);

    while (1) {
        int x = (int)_read(OUT_X) + 128;
        int y = (int)_read(OUT_Y) + 128;
        int z = (int)_read(OUT_Z) + 128;

        handle_new_values(x, y, z);
    }
}

void accelerometer_setup() {
    init_leds();

    i2c_setup();
    configure_gpio();

    USART_setup(BAUDRATE);
    USART_enable();
    init_accelerometer();
}